<?php

namespace Proxies\__CG__\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CustomerTag extends \Entities\CustomerTag implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'tag', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'display_as', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'description', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'internal_only', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'created', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'updated', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'id', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'customers'];
        }

        return ['__isInitialized__', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'tag', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'display_as', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'description', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'internal_only', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'created', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'updated', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'id', '' . "\0" . 'Entities\\CustomerTag' . "\0" . 'customers'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CustomerTag $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getTag(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTag', []);

        return parent::getTag();
    }

    /**
     * {@inheritDoc}
     */
    public function setTag(string $tag): \Entities\CustomerTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTag', [$tag]);

        return parent::setTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayAs(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayAs', []);

        return parent::getDisplayAs();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayAs(string $display_as): \Entities\CustomerTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayAs', [$display_as]);

        return parent::setDisplayAs($display_as);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description): \Entities\CustomerTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function isInternalOnly(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInternalOnly', []);

        return parent::isInternalOnly();
    }

    /**
     * {@inheritDoc}
     */
    public function setInternalOnly(bool $internal_only): \Entities\CustomerTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInternalOnly', [$internal_only]);

        return parent::setInternalOnly($internal_only);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(\DateTime $created): \Entities\CustomerTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated(\DateTime $updated): \Entities\CustomerTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomers', []);

        return parent::getCustomers();
    }

    /**
     * {@inheritDoc}
     */
    public function addCustomer(\Entities\Customer $customer): \Entities\CustomerTag
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCustomer', [$customer]);

        return parent::addCustomer($customer);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCustomer(\Entities\Customer $customer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCustomer', [$customer]);

        return parent::removeCustomer($customer);
    }

}
