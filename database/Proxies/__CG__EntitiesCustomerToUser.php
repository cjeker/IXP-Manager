<?php

namespace Proxies\__CG__\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CustomerToUser extends \Entities\CustomerToUser implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'privs', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'created_at', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'extra_attributes', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'id', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'last_login_date', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'last_login_from', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'customer', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'user', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'userLoginHistory'];
        }

        return ['__isInitialized__', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'privs', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'created_at', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'extra_attributes', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'id', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'last_login_date', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'last_login_from', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'customer', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'user', '' . "\0" . 'Entities\\CustomerToUser' . "\0" . 'userLoginHistory'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CustomerToUser $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomer', []);

        return parent::getCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserLoginHistory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserLoginHistory', []);

        return parent::getUserLoginHistory();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrivs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrivs', []);

        return parent::getPrivs();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastLoginDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastLoginDate', []);

        return parent::getLastLoginDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastLoginFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastLoginFrom', []);

        return parent::getLastLoginFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function getExtraAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtraAttributes', []);

        return parent::getExtraAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomer($cust)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomer', [$cust]);

        return parent::setCustomer($cust);
    }

    /**
     * {@inheritDoc}
     */
    public function setUserLoginHistory($userLoginHistory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserLoginHistory', [$userLoginHistory]);

        return parent::setUserLoginHistory($userLoginHistory);
    }

    /**
     * {@inheritDoc}
     */
    public function setPrivs($privs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrivs', [$privs]);

        return parent::setPrivs($privs);
    }

    /**
     * {@inheritDoc}
     */
    public function setExtraAttributes($extra_attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExtraAttributes', [$extra_attributes]);

        return parent::setExtraAttributes($extra_attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($created_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$created_at]);

        return parent::setCreatedAt($created_at);
    }

    /**
     * {@inheritDoc}
     */
    public function setLastLoginAt($last_login_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastLoginAt', [$last_login_date]);

        return parent::setLastLoginAt($last_login_date);
    }

    /**
     * {@inheritDoc}
     */
    public function setLastLoginFrom($last_login_from)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastLoginFrom', [$last_login_from]);

        return parent::setLastLoginFrom($last_login_from);
    }

}
